/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
//apply plugin: 'java'

//apply plugin: 'application'
//mainClassName = 'com.ruthenia.orders.Application'

// The Spring Boot gradle plugin provides many convenient features:
// It collects all the jars on the classpath and builds a single, runnable "über-jar", which makes it more convenient to execute and transport your service.
// It searches for the public static void main() method to flag as a runnable class.
// It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies.
// So you to omit the version number for any dependencies that are managed by Spring Boot.
// You can override any version you wish, but it will default to Boot’s chosen set of versions.
plugins {
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id 'java'
    id 'idea'
    id 'eclipse'    
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

jar {
    baseName = 'angular-springdata-orders'
    version =  '1.0.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare the dependencies for your production and test code
dependencies {
    // spring-boot-devtools module provides:
    // Enable hot swapping
    // Switches template engines to disable caching
    // Enables LiveReload to refresh browser automatically
    // Other reasonable defaults based on development instead of production
    compile("org.springframework.boot:spring-boot-devtools")

    // The production code uses the SLF4J logging API at compile time
    // compile 'org.slf4j:slf4j-api'

    // Spring Data REST takes the features of Spring HATEOAS and Spring Data JPA and combines them together automatically.
    compile 'org.springframework.boot:spring-boot-starter-data-rest'

    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'com.h2database:h2'

    // for production: use actuator module which adds some management services, such as health, audits, beans, and more.
    // for available endpoints, visit http://localhost:8080/actuator
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.jayway.jsonpath:json-path'
}